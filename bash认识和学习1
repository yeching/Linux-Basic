################################################################
参考：
1.linux shell 手册
2.鸟哥的私房菜：http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php
------------------------------------------------------------------------------------------------
目录：
	1.bash介绍
	2.bash功能
		2.1命令记忆功能
		2.2命令与文件补全功能
		2.3命令别名配置功能： (alias)
		2.4程序化脚本： (shell scripts)
	3.bash内建命令
	4.bash操作环境
	5.终端机的环境配置： stty, set
################################################################
1.bash介绍
	Bourne Again SHell (简称 bash)，	Linux 默认就是使用 bash 。
	系统上合法的 shell 要写入 /etc/shells 这个文件。
	使用者什么时候可以取得 shell 来工作呢？还有， 我这个使用者默认会取得哪一个 shell 啊？
	当我登陆的时候，系统就会给我一个 shell 让我来工作了。 而这个登陆取得的 shell 就记录在 /etc/passwd 这个文件内！
	yeqing@www:~/GitHub/Linux-Basic$ cat /etc/passwd
	root:x:0:0:root:/root:/bin/bash
	daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
	bin:x:2:2:bin:/bin:/usr/sbin/nologin
	sys:x:3:3:sys:/dev:/usr/sbin/nologin
	下面省略。。。
------------------------------------------------------------------------------------------------
2.bash功能
  2.1命令记忆功能
	2.1.1我只要在命令列按『上下键』就可以找到前/后一个输入的命令！而在很多 distribution 里头，默认的命令记忆功能可以到达 1000 个！
		也就是说， 你曾经下达过的命令几乎都被记录下来了。
	2.1.2这么多的命令记录在哪里呢？在你的家目录内的 .bash_history 啦！ 不过，需要留意的是，~/.bash_history 记录的是前一次登陆以前所运行过的命令，
		而至于这一次登陆所运行的命令都被缓存在内存中，当你成功的注销系统后，该命令记忆才会记录到 .bash_history 当中！

	2.1.3这有什么功能呢？最大的好处就是可以『查询曾经做过的举动！』 如此可以知道你的运行步骤，那么就可以追踪你曾下达过的命令，以作为除错的工具！
		 但如此一来也有个烦恼，就是如果被黑客入侵了，那么他只要翻你曾经运行过的命令， 刚好你的命令又跟系统有关 (例如直接输入 MySQL 的密码在
		命令列上面)，那你的主机可就伤脑筋了！
  2.2命令与文件补全功能
	2.2.1[Tab] 接在一串命令的第一个字的后面，则为命令补全；
	2.2.2[Tab] 接在一串命令的第二个字以后时，则为『文件补齐』！
  2.3命令别名配置功能： (alias)
		有些命令比较复杂并且常用的话，使用就非常方便.
		alias lm='ls -al'		 lm 会等于 ls -al 这样的一个功能
  2.4程序化脚本： (shell scripts)
------------------------------------------------------------------------------------------------
3.bash内建命令   常使用type查看是否是内建命令
（1）shell内建命令是指bash（或其它版本）工具集中的命令。一般都会有一个与之同名的系统命令，比如bash中的echo命令与/bin/echo是两个不同的命令，
	尽管他们行为大体相仿。当在bash中键入一个命令时系统会先看他是否是一个内建命令，如果不是才会查看是否是系统命令或第三方工具。所以在bash中键入
	echo命令实际上执行bash工具集中的bash命令也就是内建命令，而不是/bin/echo这个系统命令。

（2）内建命令要比系统论命令有比较高的执行效率。外部命令执行时往往需要fork出（产生出）一个子进程，而内建命令一般不用
例如：
yeqing@www:~/GitHub/Linux-Basic$ type echo
echo 是 shell 内建

------------------------------------------------------------------------------------------------
4.bash操作环境
  4.1bash 的进站与欢迎信息：/etc/issue  与 /etc/issue.net		/etc/motd
	/etc/issue   
		还记得在终端机接口 (tty1 ~ tty6) 登陆的时候，会有几行提示的字符串吗？那就是进站画面啊！ 那个字符串写在哪里啊？
		呵呵！在 /etc/issue 里面啊！
		---------------------------------------
		yeqing@www:~/scripts$ cat /etc/issue
		Ubuntu 14.04.3 LTS \n \l
		---------------------------------------
	/etc/issue.net	这个是提供给 telnet 这个远程登录程序用的

	/etc/motd	
		您想要让大家都知道的信息， 那么可以将信息加入 /etc/motd 里面去！例如：当登陆后，告诉登陆者， 系统将会在某个固定时间进行维护工作
		相当于公告

------------------------------------------------------------------------------------------------
					配置issue
					\d 本地端时间的日期；
					\l 显示第几个终端机接口；
					\m 显示硬件的等级 (i386/i486/i586/i686...)；
					\n 显示主机的网络名称；
					\o 显示 domain name；
					\r 操作系统的版本 (相当于 uname -r)
					\t 显示本地端时间的时间；
					\s 操作系统的名称；
					\v 操作系统的版本。
					/etc/issue
		   *********************************************************************
		                  Login Information
		   
		           Ubuntu 14.04.3 LTS \n \l
		           Date:\d \t
		           Kernel \r on an \m
		           Welcome to here!
		           Have a good time!
		   ----------------------------------------------------------------------
------------------------------------------------------------------------------------------------
  4.2bash 的环境配置文件
		为什么我们一进入 bash 就取得一堆有用的变量了？ 这是因为系统有一些环境配置文件案的存在，让 bash 在启动时直接读取这些配置文件，
		而这些配置文件又可以分为全体系统的配置文件以及用户个人偏好配置文件。要注意的是， 我们前几个小节谈到的命令别名啦、自定义的变量啦，
		在你注销 bash 后就会失效，所以你想要保留你的配置， 就得要将这些配置写入配置文件才行。底下就让我们来聊聊吧！
------------------------------------------------------------------------------------------------
	4.2.1.login 与 non-login shell	
		login shell：取得 bash 时需要完整的登陆流程的，就称为 login shell。举例来说，你要由 tty1 ~ tty6 登陆，
					需要输入用户的账号与密码，此时取得的 bash 就称为『 login shell 』啰；
		non-login shell：取得 bash 接口的方法不需要重复登陆的举动，举例来说，(1)你以 X window 登陆 Linux 后， 再以 X 的图形化接口启动终端机，
		此时那个终端接口并没有需要再次的输入账号与密码，那个 bash 的环境就称为 non-login shell了。(2)你在原本的 bash 环境下再次下达 bash 这
		个命令，同样的也没有输入账号密码， 那第二个 bash (子程序) 也是 non-login shell 。
		
		login shell 其实只会读取这两个配置文件：
		/etc/profile：这是系统整体的配置，你最好不要修改这个文件；
		~/.bash_profile 或 ~/.bash_login 或 ~/.profile：属于使用者个人配置，你要改自己的数据，就写入这里！
		那么，就让我们来聊一聊这两个文件吧！这两个文件的内容可是非常繁复的喔！
------------------------------------------------------------------------------------------------
	4.2.2./etc/profile (login shell 才会读)
		你可以使用 vim 去阅读一下这个文件的内容。这个配置文件可以利用使用者的标识符 (UID) 来决定很多重要的变量数据， 这也是每个使用者登陆
		取得 bash 时一定会读取的配置文件！ 所以如果你想要帮所有使用者配置整体环境，那就是改这里啰！不过，没事还是不要随便改这个文件喔 这个文
		件配置的变量主要有：
			PATH：会依据 UID 决定 PATH 变量要不要含有 sbin 的系统命令目录；
			MAIL：依据账号配置好使用者的 mailbox 到 /var/spool/mail/账号名；
			USER：根据用户的账号配置此一变量内容；
			HOSTNAME：依据主机的 hostname 命令决定此一变量内容；
			HISTSIZE：历史命令记录笔数。CentOS 5.x 配置为 1000 ；
		/etc/profile 可不止会做这些事而已，他还会去呼叫外部的配置数据喔！在 CentOS 5.x 默认的情况下， 底下这些数据会依序的被呼叫进来：

    	/etc/inputrc

    		其实这个文件并没有被运行啦！/etc/profile 会主动的判断使用者有没有自定义输入的按键功能，如果没有的话， /etc/profile
			 就会决定配置『INPUTRC=/etc/inputrc』这个变量！此一文件内容为 bash 的热键啦、[tab]要不要有声音啦等等的数据！ 因为鸟
			哥觉得 bash 默认的环境已经很棒了，所以不建议修改这个文件！

   		 /etc/profile.d/*.sh

    		其实这是个目录内的众多文件！只要在 /etc/profile.d/ 这个目录内且扩展名为 .sh ，另外，使用者能够具有 r 的权限， 那么该文件就会被 
			/etc/profile 呼叫进来。在 CentOS 5.x 中，这个目录底下的文件规范了 bash 操作接口的颜色、 语系、ll 与 ls 命令的命令别名、vi 的命
			令别名、which 的命令别名等等。如果你需要帮所有使用者配置一些共享的命令别名时， 可以在这个目录底下自行创建扩展名为 .sh 的文件，
			并将所需要的数据写入即可喔！

    	/etc/sysconfig/i18n

    		这个文件是由 /etc/profile.d/lang.sh 呼叫进来的！这也是我们决定 bash 默认使用何种语系的重要配置文件！ 文件里最重要的就是
			 LANG 这个变量的配置啦！我们在前面的 locale 讨论过这个文件啰！ 自行回去瞧瞧先！

	反正你只要记得，bash 的 login shell 情况下所读取的整体环境配置文件其实只有 /etc/profile，但是 /etc/profile 还会呼叫出其他的配置文件，
	所以让我们的 bash 操作接口变的非常的友善啦！ 接下来，让我们来瞧瞧，那么个人偏好的配置文件又是怎么回事？
------------------------------------------------------------------------------------------------
    4.2.3.~/.bash_profile (login shell 才会读) 
		bash 在读完了整体环境配置的 /etc/profile 并藉此呼叫其他配置文件后，接下来则是会读取使用者的个人配置文件。 在 login shell 的 bash 
		环境中，所读取的个人偏好配置文件其实主要有三个，依序分别是：
			~/.bash_profile
			~/.bash_login
			~/.profile
		其实 bash 的 login shell 配置只会读取上面三个文件的其中一个， 而读取的顺序则是依照上面的顺序。也就是说，如果 ~/.bash_profile 存在，
		那么其他两个文件不论有无存在，都不会被读取。 如果 ~/.bash_profile 不存在才会去读取 ~/.bash_login，而前两者都不存在才会读取 ~/.profile 
		的意思。 会有这么多的文件，其实是因应其他 shell 转换过来的使用者的习惯而已。
		接下来~/.bash_profile 其实会再呼叫 ~/.bashrc 的配置内容喔！
------------------------------------------------------------------------------------------------
	4.2.4 source ：读入环境配置文件的命令
		由于 /etc/profile 与 ~/.bash_profile 都是在取得 login shell 的时候才会读取的配置文件，所以， 如果你将自己的偏好配置写入上述的文件后，
		通常都是得注销再登陆后，该配置才会生效。那么，能不能直接读取配置文件而不注销登陆呢？ 可以的！那就得要利用 source 这个命令了！
		[root@www ~]# source 配置文件档名

		范例：将家目录的 ~/.bashrc 的配置读入目前的 bash 环境中
		[root@www ~]# source ~/.bashrc  <==底下这两个命令是一样的！
		[root@www ~]#  .  ~/.bashrc
	4.2.5 ~/.bashrc (non-login shell 会读)
		谈完了 login shell 后，那么 non-login shell 这种非登陆情况取得 bash 操作接口的环境配置文件又是什么？ 当你取得 non-login shell 时，
		该 bash 配置文件仅会读取 ~/.bashrc 而已啦！那么默认的 ~/.bashrc 内容是如何？
	4.2.6.其他相关配置文件
		事实上还有一些配置文件可能会影响到你的 bash 操作的，底下就来谈一谈：
    /etc/man.config   或者  /etc/manpath.config(ubuntu 14.04)
		这个文件乍看之下好像跟 bash 没相关性，但是对于系统管理员来说， 却也是很重要的一个文件！这的文件的内容『规范了使用 man 的时候， 
		man page 的路径到哪里去寻找！』所以说的简单一点，这个文件规定了下达 man 的时候，该去哪里查看数据的路径配置！

    	那么什么时候要来修改这个文件呢？如果你是以 tarball 的方式来安装你的数据，那么你的 man page 可能会放置在 /usr/local/softpackage/man 
		里头，那个 softpackage 是你的套件名称， 这个时候你就得以手动的方式将该路径加到 /etc/man.config 里头，否则使用 man 的时候就会找不到
		相关的说明档啰。

    	事实上，这个文件内最重要的其实是 MANPATH 这个变量配置啦！ 我们搜寻 man page 时，会依据 MANPATH 的路径去分别搜寻啊！另外，要注意的是，
		 这个文件在各大不同版本 Linux distributions 中，檔名都不太相同，例如 CentOS 用的是 /etc/man.config ，而 SuSE 用的则是 
		 /etc/manpath.config ， 可以利用 [tab] 按键来进行文件名的补齐啦！

    ~/.bash_history

    还记得我们在历史命令提到过这个文件吧？默认的情况下， 我们的历史命令就记录在这里啊！而这个文件能够记录几笔数据，则与 HISTFILESIZE 这个变量有关啊。每次登陆 bash 后，bash 会先读取这个文件，将所有的历史命令读入内存， 因此，当我们登陆 bash 后就可以查知上次使用过哪些命令啰。至于更多的历史命令， 请自行回去参考喔！

    ~/.bash_logout

    这个文件则记录了『当我注销 bash 后，系统再帮我做完什么动作后才离开』的意思。 你可以去读取一下这个文件的内容，默认的情况下，注销时， bash 只是帮我们清掉屏幕的信息而已。 不过，你也可以将一些备份或者是其他你认为重要的工作写在这个文件中 (例如清空缓存盘)， 那么当你离开 Linux 的时候，就可以解决一些烦人的事情啰！
------------------------------------------------------------------------------------------------
5.终端机的环境配置： stty, set
	我们可以利用 stty -a 来列出目前环境中所有的按键列表，在上头的列表当中，需要注意的是特殊字体那几个， 此外，如果出现 ^ 表示 [Ctrl]
	 那个按键的意思。举例来说， intr = ^C 表示利用 [ctrl] + c 来达成的。几个重要的代表意义是：

    eof   : End of file 的意思，代表『结束输入』。
    erase : 向后删除字符，
    intr  : 送出一个 interrupt (中断) 的讯号给目前正在 run 的程序；
    kill  : 删除在目前命令列上的所有文字；
    quit  : 送出一个 quit 的讯号给目前正在 run 的程序；
    start : 在某个程序停止后，重新启动他的 output
    stop  : 停止目前屏幕的输出；
    susp  : 送出一个 terminal stop 的讯号给正在 run 的程序。

------------------------------------------------------------------------------------------------
总结：
/etc/shells		系统上合法的 shell 要写入 /etc/shells 这个文件。
/etc/passwd		使用者什么时候可以取得 shell 来工作呢？还有， 我这个使用者默认会取得哪一个 shell 啊？
				当我登陆的时候，系统就会给我一个 shell 让我来工作了。 而这个登陆取得的 shell 就记录在 /etc/passwd 这个文件内！
~/.bash_history 记录的是前一次登陆以前所运行过的命令，
				而至于这一次登陆所运行的命令都被缓存在内存中，当你成功的注销系统后，该命令记忆才会记录到 .bash_history 当中！
/etc/issue  	配置终端机接口 (tty1 ~ tty6) 登陆的时候，提示的字符串
/etc/issue.net  与上面一样，只是远程登录程序用的
/etc/motd  或者 update-motd.d/		告诉每个登入者的信息
login shell 和 no-login shell 的区别
内建命令的意义
/etc/profile (login shell 才会读)	帮所有使用者配置整体环境
/etc/inputrc	文件内容为 bash 的热键啦、[tab]要不要有声音啦等等的数据
/etc/profile.d/*.sh		在这个目录底下的文件规范了 bash 操作接口的颜色、 语系、ll 与 ls 命令的命令别名、vi 的命令别名、
						which 的命令别名等等。如果你需要帮所有使用者配置一些共享的命令别名时， 可以在这个目录底下自行创建扩展名为 .sh 的文件
/etc/sysconfig/i18n		ubuntu的在/etc/default/locale
    		这也是我们决定 bash 默认使用何种语系的重要配置文件！ 文件里最重要的就是LANG 这个变量的配置啦！ 
~/.bash_profile (login shell 才会读) 		读取使用者的个人配置文件
			等级1~/.bash_profile   三个只读其中一个
			等级2~/.bash_login
			等级3~/.profile
~/.bashrc (non-login shell 会读)
/etc/man.config   或者  /etc/manpath.config(ubuntu 14.04)
 ~/.bash_history
~/.bash_logout	这个文件则记录了『当我注销 bash 后，系统再帮我做完什么动作后才离开』的意思。
