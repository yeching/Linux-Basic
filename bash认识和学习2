################################################################
参考：
1.linux shell 手册
2.鸟哥的私房菜：http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php
目录：
	1.shell变量
################################################################
1.shell变量
--------------------------------------------------------------------------------------------------------------------
	1.1变量的取用与配置：echo, 变量配置守则, unset
		利用 echo 这个命令来取用变量， 但是，变量在被取用时，前面必须要加上钱字号『 $ 』才行，举例来说，要知道 PATH 的内容，该如何是好？
--------------------------------------------------------------------------------------------------------------------
    变量的取用: echo
		[root@www ~]# echo $variable
		[root@www ~]# echo $PATH
		/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
		[root@www ~]# echo ${PATH}
		yeqing@www:~/GitHub/Git-Basic$ echo $PATH
		/home/yeqing/.pyenv/shims:/home/yeqing/.pyenv/bin:/home/yeqing/.pyenv/shims:/home/yeqing/.pyenv/bin:/usr/local/sbin:/usr/local/bin:
		/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
--------------------------------------------------------------------------------------------------------------------
	变量的配置守则

		1.变量与变量内容以一个等号『=』来连结 

		2.等号两边不能直接接空格符， 

		3.变量名称只能是英文字母与数字，但是开头字符不能是数字 

		4.变量内容若有空格符可使用双引号『"』或单引号『'』将变量内容结合起来，
		但双引号内的特殊字符如 $ 等，可以保有原本的特性，如下所示：
		    『var="lang is $LANG"』则『echo $var』可得『lang is en_US』
		    单引号内的特殊字符则仅为一般字符 (纯文本)，如下所示：
		    『var='lang is $LANG'』则『echo $var』可得『lang is $LANG』

    	5.可用跳脱字符『 \ 』将特殊符号(如 [Enter], $, \, 空格符, '等)变成一般字符；

    	6.在一串命令中，还需要藉由其他的命令提供的信息，可以使用反单引号『`命令`』或 『$(命令)』。特别注意，那个 ` 是键盘上方的数字键 1 
			左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：
    		version=$(uname -r)再echo $version可得2.6.18-128.el5

    	7.若该变量为扩增变量内容时，则可用 "$变量名称" 或 ${变量} 累加内容，如下所示：
    	PATH="$PATH":/home/bin

    	8.若该变量需要在其他子程序运行，则需要以 export 来使变量变成环境变量：
    	export PATH 

   		9. 通常大写字符为系统默认变量，自行配置变量可以使用小写字符，方便判断 (纯粹依照使用者兴趣与嗜好) ；

    	10.取消变量的方法为使用 unset ：『unset 变量名称』例如取消 myname 的配置：
     		unset myname 
--------------------------------------------------------------------------------------------------------------------
	1.2环境变量的功能
		环境变量可以帮我们达到很多功能～包括家目录的变换啊、提示字符的显示啊、运行文件搜寻的路径啊等等的， 还有很多很多啦！那么，既然环境变量
		有那么多的功能，问一下，目前我的 shell 环境中， 有多少默认的环境变量啊？我们可以利用两个命令来查阅，分别是 env 与 export 呢！
--------------------------------------------------------------------------------------------------------------------
	用 env 观察环境变量与常见环境变量说明
		env 是 environment (环境) 的简写啊，使用 export 也会是一样的内容～ 只不过， export 还有其他额外的功能就是了
		HOME
			代表用户的家目录。还记得我们可以使用 cd ~ 去到自己的家目录吗？或者利用 cd 就可以直接回到用户家目录了。那就是取用这个变量啦～ 
			有很多程序都可能会取用到这个变量的值！

		SHELL
			告知我们，目前这个环境使用的 SHELL 是哪支程序？ Linux 默认使用 /bin/bash 的啦！

		HISTSIZE
			这个与『历史命令』有关，亦即是， 我们曾经下达过的命令可以被系统记录下来，而记录的『笔数』则是由这个值来配置的。

		MAIL
			当我们使用 mail 这个命令在收信时，系统会去读取的邮件信箱文件 (mailbox)。

		PATH
		  就是运行文件搜寻的路径啦～目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由 PATH 的变量内的目录来查询，所以，目录的顺序也是重要的喔。

		LANG
			这个重要！就是语系数据啰～很多信息都会用到他， 举例来说，当我们在启动某些 perl 的程序语言文件时，他会主动的去分析语系数据文件， 
			如果发现有他无法解析的编码语系，可能会产生错误喔！一般来说，我们中文编码通常是 zh_TW.Big5 或者是 zh_TW.UTF-8，这两个编码偏偏不容易
			被解译出来，所以，有的时候，可能需要修订一下语系数据。 这部分我们会在下个小节做介绍的！

		RANDOM
			这个玩意儿就是『随机随机数』的变量啦！目前大多数的 distributions 都会有随机数生成器，那就是 /dev/random 这个文件。 
			我们可以透过这个随机数文件相关的变量 ($RANDOM) 来随机取得随机数值喔。在 BASH 的环境下，这个 RANDOM 变量的内容，介于 0~32767 之间，
			所以，你只要 echo $RANDOM 时，系统就会主动的随机取出一个介于 0~32767 的数值。万一我想要使用 0~9 之间的数值呢？呵呵～
			利用 declare 宣告数值类型， 然后这样做就可以了：
			[root@www ~]# declare -i number=$RANDOM*10/32768 ; echo $number
			8   <== 此时会随机取出 0~9 之间的数值喔！

--------------------------------------------------------------------------------------------------------------------
	用 set 观察所有变量 (含环境变量与自定义变量)
		bash 可不只有环境变量喔，还有一些与 bash 操作接口有关的变量，以及用户自己定义的变量存在的。 那么这些变量如何观察呢？这个时候就得要
		使用 set 这个命令了。 set 除了环境变量之外， 还会将其他在 bash 内的变量通通显示出来哩

		PS1：(提示字符的配置)	PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

			这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『命令提示字符』喔！ 当我们每次按下 [Enter] 按键去运行某个命令后，
			最后要再次出现提示字符时， 就会主动去读取这个变量值了
	--------------------------------------------------------------------------------------------------------------------
			\d ：可显示出『星期 月 日』的日期格式，如："Mon Feb 2"
			\H ：完整的主机名。举例来说，鸟哥的练习机为『www.vbird.tsai』
			\h ：仅取主机名在第一个小数点之前的名字，如鸟哥主机则为『www』后面省略
			\t ：显示时间，为 24 小时格式的『HH:MM:SS』
			\T ：显示时间，为 12 小时格式的『HH:MM:SS』
			\A ：显示时间，为 24 小时格式的『HH:MM』
			\@ ：显示时间，为 12 小时格式的『am/pm』样式
			\u ：目前使用者的账号名称，如『root』；
			\v ：BASH 的版本信息，如鸟哥的测试主板本为 3.2.25(1)，仅取『3.2』显示
			\w ：完整的工作目录名称，由根目录写起的目录名称。但家目录会以 ~ 取代；
			\W ：利用 basename 函数取得工作目录名称，所以仅会列出最后一个目录名。
			\# ：下达的第几个命令。
			\$ ：提示字符，如果是 root 时，提示字符为 # ，否则就是 $ 啰～
	--------------------------------------------------------------------------------------------------------------------

	好了，让我们来看看 CentOS 默认的 PS1 内容吧：『[\u@\h \W]\$ 』，现在你知道那些反斜杠后的数据意义了吧？ 要注意喔！那个反斜杠后的数据为 PS1 
	的特殊功能，与 bash 的变量配置没关系啦！不要搞混了喔！ 那你现在知道为何你的命令提示字符是：『 [root@www ~]# 』了吧？ 好了，那么假设我想要
	有类似底下的提示字符：

		[root@www /home/dmtsai 16:50 #12]# 

	那个 # 代表第 12 次下达的命令。那么应该如何配置 PS1 呢？可以这样啊：
	[root@www ~ ]# cd /home
	[root@www home]# PS1='[\u@\h \w \A #\#]\$ '
	[root@www /home 17:02 #85]# 
	# 看到了吗？提示字符变了！变的很有趣吧！其中，那个 #85 比较有趣，
	# 如果您再随便输入几次 ls 后，该数字就会添加喔！为啥？上面有说明滴！
	--------------------------------------------------------------------------------------------------------------------
		$：(关于本 shell 的 PID)
			钱字号本身也是个变量喔！这个咚咚代表的是『目前这个 Shell 的线程代号』，亦即是所谓的 PID (Process ID)。 
			想要知道我们的 shell 的 PID ，就可以用：『 echo $$ 』即可！出现的数字就是你的 PID 号码。
		?：(关于上个运行命令的回传值)
			？问号也是一个特殊的变量！在 bash 里面这个变量可重要的很！ 这个变量是：『上一个运行的命令所回传的值』， 上面这句话的重点是
			『上一个命令』与『回传值』两个地方。当我们运行某些命令时， 这些命令都会回传一个运行后的代码。一般来说，如果成功的运行该命令， 
			则会回传一个 0 值，如果运行过程发生错误，就会回传『错误代码』才对！一般就是以非为 0 的数值来取代。
	export： 自定义变量转成环境变量
		谈了 env 与 set 现在知道有所谓的环境变量与自定义变量，那么这两者之间有啥差异呢？其实这两者的差异在于『 该变量是否会被子程序所继续引用』啦
		我们在原本的 bash 底下运行另一个 bash ，结果操作的环境接口会跑到第二个 bash 去(就是子程序)， 那原本的 bash 就会在暂停的情况
		 (睡着了，就是 sleep)。

	影响显示结果的语系变量 (locale)
		我们的 Linux 到底支持了多少的语系呢？这可以由 locale 这个命令来查询到喔！
		[root@www ~]# locale -a
		[root@www ~]# locale  <==后面不加任何选项与参数即可！
	变量键盘读取、数组与宣告： read, array, declare
	
	 read
		要读取来自键盘输入的变量，就是用 read 这个命令了。这个命令最常被用在 shell script 的撰写当中， 想要跟使用者对谈？用这个命令就对了。
		[root@www ~]# read [-pt] variable
		选项与参数：
		-p  ：后面可以接提示字符！
		-t  ：后面可以接等待的『秒数！』这个比较有趣～不会一直等待使用者啦！
    declare / typeset

		declare 或 typeset 是一样的功能，就是在『宣告变量的类型』。如果使用 declare 后面并没有接任何参数，那么 bash 就会主动的将所有
		的变量名称与内容通通叫出来，就好像使用 set 一样啦！ 那么 declare 还有什么语法呢？看看先：

		[root@www ~]# declare [-aixr] variable
		选项与参数：
		-a  ：将后面名为 variable 的变量定义成为数组 (array) 类型
		-i  ：将后面名为 variable 的变量定义成为整数数字 (integer) 类型
		-x  ：用法与 export 一样，就是将后面的 variable 变成环境变量；
		-r  ：将变量配置成为 readonly 类型，该变量不可被更改内容，也不能 unset

		范例一：让变量 sum 进行 100+300+50 的加总结果
		[root@www ~]# sum=100+300+50
		[root@www ~]# echo $sum
		100+300+50  <==咦！怎么没有帮我计算加总？因为这是文字型态的变量属性啊！
		[root@www ~]# declare -i sum=100+300+50
		[root@www ~]# echo $sum
		450         <==瞭乎？？
	与文件系统及程序的限制关系： ulimit

		想象一个状况：我的 Linux 主机里面同时登陆了十个人，这十个人不知怎么搞的， 同时开启了 100 个文件，每个文件的大小约 10MBytes ，
		请问一下， 我的 Linux 主机的内存要有多大才够？ 10*100*10 = 10000 MBytes = 10GBytes ... 老天爷，这样，系统不挂点才有鬼哩！
		为了要预防这个情况的发生，所以我们的 bash 是可以『限制用户的某些系统资源』的，包括可以开启的文件数量， 可以使用的 CPU 时间，
		可以使用的内存总量等等。如何配置？用 ulimit 吧！

		[root@www ~]# ulimit [-SHacdfltu] [配额]
		选项与参数：
		-H  ：hard limit ，严格的配置，必定不能超过这个配置的数值；
		-S  ：soft limit ，警告的配置，可以超过这个配置值，但是若超过则有警告信息。
			  在配置上，通常 soft 会比 hard 小，举例来说，soft 可配置为 80 而 hard 
			  配置为 100，那么你可以使用到 90 (因为没有超过 100)，但介于 80~100 之间时，
			  系统会有警告信息通知你！
		-a  ：后面不接任何选项与参数，可列出所有的限制额度；
		-c  ：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件(除错用)，
			  这种文件就被称为核心文件(core file)。此为限制每个核心文件的最大容量。
		-f  ：此 shell 可以创建的最大文件容量(一般可能配置为 2GB)单位为 Kbytes
		-d  ：程序可使用的最大断裂内存(segment)容量；
		-l  ：可用于锁定 (lock) 的内存量
		-t  ：可使用的最大 CPU 时间 (单位为秒)
		-u  ：单一用户可以使用的最大程序(process)数量。

	变量内容的删除、取代与替换
		变量内容的删除与取代		
		变量的测试与内容替换
-------------------------------------------------------------------------------
总结：
1.变量的取用: echo
2.变量的配置守则
		**.变量内容若有空格符可使用双引号『"』或单引号『'』将变量内容结合起来，
		但双引号内的特殊字符如 $ 等，可以保有原本的特性，如下所示：
		    『var="lang is $LANG"』则『echo $var』可得『lang is en_US』
		    单引号内的特殊字符则仅为一般字符 (纯文本)，如下所示：
		    『var='lang is $LANG'』则『echo $var』可得『lang is $LANG』

    	**.可用跳脱字符『 \ 』将特殊符号(如 [Enter], $, \, 空格符, '等)变成一般字符；

    	**.在一串命令中，还需要藉由其他的命令提供的信息，可以使用反单引号『`命令`』或 『$(命令)』。特别注意，那个 ` 是键盘上方的数字键 1 
			左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：
    		version=$(uname -r)再echo $version可得2.6.18-128.el5

    	**.若该变量为扩增变量内容时，则可用 "$变量名称" 或 ${变量} 累加内容，如下所示：
    	PATH="$PATH":/home/bin
3.用 env 观察环境变量与常见环境变量说明
	HOME
	SHELL 
	MAIL
	PATH
	LANG
	RANDOM 随机数	一个介于 0~32767 的数值   number=$RANDOM*10/32768
4.用 set 观察所有变量 (含环境变量与自定义变量)
	PS1：(提示字符的配置)	PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
	PS1：(提示字符的配置)	PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h \A #\#:\w\$ '
	$：(关于本 shell 的 PID)
	?：(关于上个运行命令的回传值)
5.export： 自定义变量转成环境变量
6.影响显示结果的语系变量 (locale)
	变量键盘读取、数组与宣告： read, array, declare
	与文件系统及程序的限制关系： ulimit
7.变量内容的删除、取代与替换
