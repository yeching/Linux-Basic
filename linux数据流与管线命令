/*=====================================================================================================*/
目录：
	1.数据流重导向
	2.命令运行的判断依据： ; , &&, ||
	3.管线命令 (pipe)
/*=====================================================================================================*/
1.数据流重导向

    标准输入　　(stdin) ：代码为 0 ，使用 < 或 << ；
    标准输出　　(stdout)：代码为 1 ，使用 > 或 >> ；
    标准错误输出(stderr)：代码为 2 ，使用 2> 或 2>> ；
---------------------------------------------------------------------------------
（1）standard output 与 standard error output
    1> ：以覆盖的方法将『正确的数据』输出到指定的文件或装置上；		>默认为1
    1>>：以累加的方法将『正确的数据』输出到指定的文件或装置上；
    2> ：以覆盖的方法将『错误的数据』输出到指定的文件或装置上；
    2>>：以累加的方法将『错误的数据』输出到指定的文件或装置上；

范例一：观察你的系统根目录 (/) 下各目录的文件名、权限与属性，并记录下来
	[root@www ~]# ll /  <==此时屏幕会显示出文件名信息

	[root@www ~]# ll / > ~/rootfile <==屏幕并无任何信息
	[root@www ~]# ll  ~/rootfile <==有个新档被创建了！
	-rw-r--r-- 1 root root 1089 Feb  6 17:00 /root/rootfile

范例二：利用一般身份账号搜寻 /home 底下是否有名为 .bashrc 的文件存在
	[root@www ~]# su - dmtsai  <==假设我的系统有名为 dmtsai 的账号
	[dmtsai@www ~]$ find /home -name .bashrc <==身份是 dmtsai 喔！
	find: /home/lost+found: Permission denied  <== Standard error
	find: /home/alex: Permission denied        <== Standard error
	find: /home/arod: Permission denied        <== Standard error
	/home/dmtsai/.bashrc                       <== Standard output

范例三：承范例二，将 stdout 与 stderr 分存到不同的文件去
	[dmtsai@www ~]$ find /home -name .bashrc > list_right 2> list_error

(2)./dev/null 垃圾桶黑洞装置与特殊写法
	想象一下，如果我知道错误信息会发生，所以要将错误信息忽略掉而不显示或储存呢？ 这个时候黑洞装置 /dev/null 就很重要了！
	这个 /dev/null 可以吃掉任何导向这个装置的信息喔！将上述的范例修订一下：

范例四：承范例三，将错误的数据丢弃，屏幕上显示正确的数据
	[dmtsai@www ~]$ find /home -name .bashrc 2> /dev/null
	/home/dmtsai/.bashrc  <==只有 stdout 会显示到屏幕上， stderr 被丢弃了

范例五：将命令的数据全部写入名为 list 的文件中
	[dmtsai@www ~]$ find /home -name .bashrc > list 2> list  <==错误
	[dmtsai@www ~]$ find /home -name .bashrc > list 2>&1     <==正确
	[dmtsai@www ~]$ find /home -name .bashrc &> list         <==正确
---------------------------------------------------------------------------------
（3）standard input ： < 与 <<
范例六：利用 cat 命令来创建一个文件的简单流程
	[root@www ~]# cat > catfile
	testing
	cat file test
	<==这里按下 [ctrl]+d 来离开

	[root@www ~]# cat catfile
	testing
	cat file test

范例七：用 stdin 取代键盘的输入以创建新文件的简单流程
	[root@www ~]# cat > catfile < ~/.bashrc
	[root@www ~]# ll catfile ~/.bashrc
	-rw-r--r-- 1 root root 194 Sep 26 13:36 /root/.bashrc
	-rw-r--r-- 1 root root 194 Feb  6 18:29 catfile
	# 注意看，这两个文件的大小会一模一样！几乎像是使用 cp 来复制一般！

	[root@www ~]# cat > catfile << "eof"
	> This is a test.
	> OK now stop
	> eof  <==输入这关键词，立刻就结束而不需要输入 [ctrl]+d

	[root@www ~]# cat catfile
	This is a test.
	OK now stop     <==只有这两行，不会存在关键词那一行！
范例八：用/dev/null清空文件内容
	yeqing@www:~/shellscripts$ cat test
	hello
	yeqing@www:~/shellscripts$ cat /dev/null > test
	yeqing@www:~/shellscripts$ cat test
	yeqing@www:~/shellscripts$ -->没有出现内容 ==  相当于用空的覆盖了test文件
---------------------------------------------------------------------------------
2.命令运行的判断依据： ; , &&, ||
	?：(关于上个运行命令的回传值)
	$? (命令回传值) 与 && 或 ||
	cmd1 && cmd2	1. 若 cmd1 运行完毕且正确运行($?=0)，则开始运行 cmd2。
					2. 若 cmd1 运行完毕且为错误 ($?≠0)，则 cmd2 不运行。
	cmd1 || cmd2	1. 若 cmd1 运行完毕且正确运行($?=0)，则 cmd2 不运行。
					2. 若 cmd1 运行完毕且为错误 ($?≠0)，则开始运行 cmd2。
-------------------------------------------------------------
3.管线命令 (pipe)
	假设我们想要知道 /etc/ 底下有多少文件，那么可以利用 ls /etc 来查阅，不过， 因为 /etc 底下的文件太多，导致一口
	气就将屏幕塞满了～不知道前面输出的内容是啥？此时，我们可以透过 less 命令的协助，利用：
	[root@www ~]# ls -al /etc | less
	其实这个管线命令『 | 』仅能处理经由前面一个命令传来的正确信息，也就是 standard output 的信息，对于 stdandard error 并没有直接处理的能力。

    管线命令仅会处理 standard output，对于 standard error output 会予以忽略
    管线命令必须要能够接受来自前一个命令的数据成为 standard input 继续处理才行。
-------------------------------------------------------------
撷取命令： cut, grep

	什么是撷取命令啊？说穿了，就是将一段数据经过分析后，取出我们所想要的。或者是经由分析关键词，取得我们所想要的那一行！ 不过，要注意的是，
	一般来说，撷取信息通常是针对『一行一行』来分析的， 并不是整篇信息分析的喔～底下我们介绍两个很常用的信息撷取命令：
-------------------------------------------------------------
cut

	cut 不就是『切』吗？没错啦！这个命令可以将一段信息的某一段给他『切』出来～ 处理的信息是以『行』为单位喔！底下我们就来谈一谈：

	[root@www ~]# cut -d'分隔字符' -f fields <==用于有特定分隔字符
	[root@www ~]# cut -c 字符区间            <==用于排列整齐的信息
	选项与参数：
	-d  ：后面接分隔字符。与 -f 一起使用；
	-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；
	-c  ：以字符 (characters) 的单位取出固定字符区间；
-------------------------------------------------------------
grep

	刚刚的 cut 是将一行信息当中，取出某部分我们想要的，而 grep 则是分析一行信息， 若当中有我们所需要的信息，就将该行拿出来～简单的语法是这样的：

	[root@www ~]# grep [-acinv] [--color=auto] '搜寻字符串' filename
	选项与参数：
	-a ：将 binary 文件以 text 文件的方式搜寻数据
	-c ：计算找到 '搜寻字符串' 的次数
	-i ：忽略大小写的不同，所以大小写视为相同
	-n ：顺便输出行号
	-v ：反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！
	--color=auto ：可以将找到的关键词部分加上颜色的显示喔！
-------------------------------------------------------------
排序命令： sort, wc, uniq
-------------------------------------------------------------
sort
	[root@www ~]# sort [-fbMnrtuk] [file or stdin]
	选项与参数：
	-f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；
	-b  ：忽略最前面的空格符部分；
	-M  ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；
	-n  ：使用『纯数字』进行排序(默认是以文字型态来排序的)；
	-r  ：反向排序；
	-u  ：就是 uniq ，相同的数据中，仅出现一行代表；
	-t  ：分隔符，默认是用 [tab] 键来分隔；
	-k  ：以那个区间 (field) 来进行排序的意思
-------------------------------------------------------------
uniq
	[root@www ~]# uniq [-ic]
	选项与参数：
	-i  ：忽略大小写字符的不同；
	-c  ：进行计数

	范例一：使用 last 将账号列出，仅取出账号栏，进行排序后仅取出一位；
	[root@www ~]# last | cut -d ' ' -f1 | sort | uniq

	范例二：承上题，如果我还想要知道每个人的登陆总次数呢？
	[root@www ~]# last | cut -d ' ' -f1 | sort | uniq -c
		  1
		 12 reboot
		 41 root
		  1 wtmp
	# 从上面的结果可以发现 reboot 有 12 次， root 登陆则有 41 次！
	# wtmp 与第一行的空白都是 last 的默认字符，那两个可以忽略的！
-------------------------------------------------------------
wc
	[root@www ~]# wc [-lwm]
	选项与参数：
	-l  ：仅列出行；
	-w  ：仅列出多少字(英文单字)；
	-m  ：多少字符；

	范例一：那个 /etc/man.config 里面到底有多少相关字、行、字符数？
	[root@www ~]# cat /etc/man.config | wc 
		141     722    4617
	# 输出的三个数字中，分别代表： 『行、字数、字符数』

	范例二：我知道使用 last 可以输出登陆者，但是 last 最后两行并非账号内容，
		    那么请问，我该如何以一行命令串取得这个月份登陆系统的总人次？
	[root@www ~]# last | grep [a-zA-Z] | grep -v 'wtmp' | wc -l 
	# 由于 last 会输出空白行与 wtmp 字样在最底下两行，因此，我利用
	# grep 取出非空白行，以及去除 wtmp 那一行，在计算行数，就能够了解啰！
-------------------------------------------------------------
双向重导向： tee
	据流分送到文件去与屏幕 (screen)；而输出到屏幕的，其实就是 stdout ，可以让下个命令继续处理喔！
-------------------------------------------------------------
字符转换命令： tr, col, join, paste, expand
-------------------------------------------------------------
分割命令： split

	如果你有文件太大，导致一些携带式装置无法复制的问题，嘿嘿！找 split 就对了！ 他可以帮你将一个大文件，依据文件大小或行数来分割，
	就可以将大文件分割成为小文件了！ 快速又有效啊！真不错～
-------------------------------------------------------------
参数代换： xargs

	xargs 是在做什么的呢？就以字面上的意义来看， x 是加减乘除的乘号，args 则是 arguments (参数) 的意思，所以说，
	这个玩意儿就是在产生某个命令的参数的意思！ xargs 可以读入 stdin 的数据，并且以空格符或断行字符作为分辨，将 
	stdin 的数据分隔成为 arguments 。 因为是以空格符作为分隔，所以，如果有一些档名或者是其他意义的名词内含有
	空格符的时候， xargs 可能就会误判了～他的用法其实也还满简单的！就来看一看先！
-------------------------------------------------------------
关于减号 - 的用途

	管线命令在 bash 的连续的处理程序中是相当重要的！另外，在 log file 的分析当中也是相当重要的一环， 所以请特别留意！另外，
	在管线命令当中，常常会使用到前一个命令的 stdout 作为这次的 stdin ， 某些命令需要用到文件名 (例如 tar) 来进行处理时，
	该 stdin 与 stdout 可以利用减号 "-" 来替代， 举例来说：

	[root@www ~]# tar -cvf - /home | tar -xvf -

	上面这个例子是说：『我将 /home 里面的文件给他打包，但打包的数据不是纪录到文件，而是传送到 stdout； 经过管线后，
	将 tar -cvf - /home 传送给后面的 tar -xvf - 』。后面的这个 - 则是取用前一个命令的 stdout， 因此，我们就不需要
	使用 file 了！这是很常见的例子喔！注意注意！

