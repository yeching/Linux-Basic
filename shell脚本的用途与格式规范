/*===============================================================================================================*/
参考：鸟哥的私房菜
/*===============================================================================================================*/
目录：
	一.脚本的用途
	二.脚本格式与规范
----------------------------------------------------------------
一.脚本的用途
----------------------------------------------------------------
1.自动化管理的重要依据：
		不用鸟哥说你也知道，管理一部主机真不是件简单的事情，每天要进行的任务就有： 
		查询登录档、追踪流量、监控使用者使用主机状态、主机各项硬件设备状态、 主机软件升级查询、
		更不要说得应付其他使用者的突然要求了。而这些工作的进行可以分为： 
		(1)自行手动处理，或是 (2)写个简单的程序来帮你每日自动处理分析这两种方式，你觉得哪种方式比较好？
		 当然是让系统自动工作比较好，对吧！呵呵～这就得要良好的 shell script 来帮忙的啦！

2.追踪与管理系统的重要工作：
	虽然我们还没有提到服务启动的方法，不过，这里可以先提一下，我们 Linux 系统的服务 (services) 启动的介面是在 /etc/init.d/ 这个目录下，
	目录下的所有文件都是 scripts ； 另外，包括启动 (booting) 过程也都是利用 shell script 来帮忙搜寻系统的相关配置数据， 然后再代入各个
	服务的配置参数啊！举例来说，如果我们想要重新启动系统登录档， 可以使用：『/etc/init.d/syslogd restart』，那个 syslogd 文件就是 script 啦！
    另外，鸟哥曾经在某一代的 Fedora 上面发现，启动 MySQL 这个数据库服务时，确实是可以启动的， 但是萤幕上却老是出现『failure』！后来才发现，
	原来是启动 MySQL 那个 script 会主动的以『空的密码』去尝试登陆 MySQL ，但为了安全性鸟哥修改过 MySQL 的密码罗～当然就登陆失败～ 后来改了
	改 script ，就略去这个问题啦！如此说来， script 确实是需要学习的啊！

3.简单入侵侦测功能：

    当我们的系统有异状时，大多会将这些异状记录在系统记录器，也就是我们常提到的『系统登录档』， 那么我们可以在固定的几分钟内主动的去分析
	系统登录档，若察觉有问题，就立刻通报管理员， 或者是立刻加强防火墙的配置守则，如此一来，你的主机可就能够达到『自我保护』的聪明学习功
	能啦～ 举例来说，我们可以通过 shell script 去分析『当该封包尝试几次还是连线失败之后，就予以抵挡住该 IP』之类的举动，例如鸟哥写过一个
	关於抵挡砍站软件的 shell script ， 就是用这个想法去达成的呢！

4.连续命令单一化：
    其实，对於新手而言， script 最简单的功能就是：『汇整一些在 command line 下达的连续命令，将他写入 scripts 当中，而由直接运行 scripts 
	来启动一连串的 command line 命令输入！』例如： 防火墙连续守则 (iptables)，启动加载程序的项目 (就是在 /etc/rc.d/rc.local 里头的数据) ，
	等等都是相似的功能啦！ 其实，说穿了，如果不考虑 program 的部分，那么 scripts 也可以想成『仅是帮我们把一大串的命令汇整在一个文件里面， 
	而直接运行该文件就可以运行那一串又臭又长的命令段！』就是这么简单啦！

5.简易的数据处理：
    由前一章正规表示法的 awk 程序说明中， 你可以发现， awk 可以用来处理简单的数据数据呢！例如薪资单的处理啊等等的。 shell script 的功能
	更强大，例如鸟哥曾经用 shell script 直接处理数据数据的比对啊， 文字数据的处理啊等等的，撰写方便，速度又快(因为在 Linux 效能较佳)，真的
	是很不错用的啦！

6.跨平台支持与学习历程较短：
    几乎所有的 Unix Like 上面都可以跑 shell script ，连 MS Windows 系列也有相关的 script 模拟器可以用， 此外， shell script 
	的语法是相当亲和的，看都看的懂得文字 (虽然是英文)，而不是机器码， 很容易学习～这些都是你可以加以考量的学习点啊！
-----------------------------------------------------------------------------
二.脚本格式与规范
----------------------------------------------------------------
1.第一行 #!/bin/bash 在宣告这个 script 使用的 shell 名称：
	那么当这个程序被运行时，他就能够加载 bash 的相关环境配置档 (一般来说就是 non-login shell 的 ~/.bashrc)， 并且运行 bash 来使我们底下的
	命令能够运行！这很重要的！(在很多状况中，如果没有配置好这一行， 那么该程序很可能会无法运行，因为系统可能无法判断该程序需要
	使用什么 shell 来运行啊！)
2.程序内容的说明：
	一般来说， 建议你一定要养成说明该 script 的：1. 内容与功能； 2. 版本资讯； 3. 作者与联络方式； 4. 建档日期；5. 历史纪录 
	等等。这将有助於未来程序的改写与 debug 呢！
3.主要环境变量的宣告：
	建议务必要将一些重要的环境变量配置好，鸟哥个人认为， PATH 与 LANG (如果有使用到输出相关的资讯时) 是当中最重要的！ 如此一来，
	则可让我们这支程序在进行时，可以直接下达一些外部命令，而不必写绝对路径呢！比较好啦！
4.主要程序部分
5.运行成果告知 (定义回传值)
	讨论一个命令的运行成功与否，可以使用 $? 这个变量来观察～ 那么我们也可以利用 exit 这个命令来让程序中断，并且回传一个数值给系统。
	或者写一条信息告诉程序完成：echo "your program is completed"
-----------------------------------------------------------------------------
撰写 shell script 的良好习惯创建
 我都会自行先定义好一些一定会被用到的环境变量，例如 PATH 这个玩意儿！ 这样比较好啦～所以说，建议你一定要养成良好的 script 撰写习惯，
 在每个 script 的档头处记录好：
    script 的功能；
    script 的版本资讯；
    script 的作者与联络方式；
    script 的版权宣告方式；
    script 的 History (历史纪录)；
    script 内较特殊的命令，使用『绝对路径』的方式来下达；
    script 运行时需要的环境变量预先宣告与配置。
-----------------------------------------------------------------------------
/*===============================================================================================================*/
总结：
1.养成写文件头的习惯，可以很好的记录脚本
2.在程序内容中应该写一些注释，可以更好理解程序运行过程
/*===============================================================================================================*/
